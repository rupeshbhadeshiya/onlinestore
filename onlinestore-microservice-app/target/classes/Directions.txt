!(Always follow TDD, Keep app fully functional & testable at all time - from beginning to end)!
!(Always follow 12-factors/DDD/microservices principles)!

* First develop Pure Business, with hardcoded values, without any Infra [?]
** So make it functional. Keep it functional irrespective of whatever changes made/ come up
* Then make it Maven/Gradle based [?]
* Then add in-memory DB [?]
* Then make it web accessible, still with hardcoded values [?]
* Then add Messaging system (Kafka, ActiveMQ) which also stores Events for later use [17-Apr]
* Complete Microservice App: Inventory > Shopping > Checkout > View Order > Review [?]

* Config Server
* APIGW (Zuul?)
* Load-Balancing

* Then add Cache
* Then add Security

* Then eventual-consistency
* Then transaction-mgmt involving multiple-microservices in one business request processing

* Then add actual DB (relational or no-sql for development, h2 (in-mem) DB for test)
* Then add logs
* Then add debugging support
* Then make it Cloud-native (dynamic scaling)
* Then add API Documentation support
* Then Load Test
* Then Debug
